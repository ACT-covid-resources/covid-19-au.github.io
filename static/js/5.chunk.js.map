{"version":3,"sources":["GoogleMap.js"],"names":["GoogleMap","province","newData","redGradient","purpleGradient","useState","loading","setLoading","mapType","setMapType","mapGradient","setMapGradient","useEffect","myData","setMyData","translate","label","temp","i","length","value","proportionConfirmed","ausPop","Math","round","proportionTested","strikeRate","push","v","f","parseInt","className","name","onChange","e","target","width","window","innerWidth","left","align","top","chartType","data","options","region","colorAxis","colors","backgroundColor","datalessRegionColor","defaultColor","resolution","mapsApiKey","rootProps"],"mappings":"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","file":"static/js/5.chunk.js","sourcesContent":["import React, { useEffect, useState} from 'react'\n\nimport ausPop from './data/ausPop'\n\nimport NativeSelect from '@material-ui/core/NativeSelect'\n\nimport { Chart } from \"react-google-charts\";\n\nfunction GoogleMap ({ province, newData }) {\n    // Colour gradients for the map: https://material.io/design/color/#tools-for-picking-colors\n    const redGradient = [\n        '#ffefef',\n        '#ffc0b1',\n        '#ff8c71',\n        '#ef1717'\n        // '#9c0505'\n    ];\n\n    const purpleGradient = [\n        '#F3E5F5',\n        '#CE93D8',\n        '#AB47BC',\n        '#8E24AA'\n    ];\n\n    const yellowGradient = [\n        '#FFFDE7',\n        '#FFF59D',\n        '#FFEE58',\n        '#FDD835'\n    ];\n\n  const [loading, setLoading] = useState(true);\n  const [mapType, setMapType] = useState('confirmed-cases');\n  const [mapGradient, setMapGradient] = useState(redGradient);\n\n    useEffect(() => {\n\n        setLoading(false)\n\n    }, [province]);\n  \n  const [ myData, setMyData] = useState(null);\n    useEffect(() => {\n\n        let translate = {\n            \"NSW\":\"AU-NSW\",\n            \"ACT\":\"AU-ACT\",\n            \"NT\":\"AU-NT\",\n            \"WA\":\"AU-WA\",\n            \"VIC\":\"AU-VIC\",\n            \"QLD\":\"AU-QLD\",\n            \"SA\":\"AU-SA\",\n            \"TAS\":\"AU-TAS\",\n        }\n        \n        // Set the hover label and colour gradient\n        let label = \"\";\n        switch(mapType) {\n            case 'confirmed-cases':\n                label = 'Confirmed';\n                setMapGradient(redGradient);\n                break;\n            case 'relative-cases':\n                label = \"Cases per million\";\n                setMapGradient(redGradient);\n                break;\n            case 'deaths':\n                label = \"Deaths\";\n                setMapGradient(redGradient);\n                break;\n            case 'tested':\n                label = \"Tested\"\n                setMapGradient(purpleGradient);\n                break;\n            case 'relative-tests':\n                label = \"Tests per million\";\n                setMapGradient(purpleGradient);\n                break;\n            case 'test-strike':\n                label = \"Test strike rate (%)\";\n                setMapGradient(purpleGradient);\n                break;\n        }\n        let temp = [[\"state\",label]];\n\n        // Set data values\n        for(let i = 0; i < newData.length; i++) {\n            let value;\n            switch(mapType) {\n                case 'confirmed-cases':\n                    value = newData[i][1];\n                    break;\n                case 'relative-cases':\n                    if (newData[i][1] === \"N/A\") { continue; }\n                    let proportionConfirmed = (newData[i][1] * 1000000) / ausPop[newData[i][0]];\n                    value = Math.round(proportionConfirmed);\n                    break;\n                case 'deaths':\n                    value = newData[i][2];\n                    break;\n                case 'tested':\n                    value = newData[i][4];\n                    break;\n                case 'relative-tests':\n                    if (newData[i][4] === \"N/A\") { continue; }\n                    let proportionTested = (newData[i][4] * 1000000) / ausPop[newData[i][0]];\n                    value = Math.round(proportionTested);\n                    break;\n                case 'test-strike':\n                    if (newData[i][4] === \"N/A\" || newData[i][1] === \"N/A\") { continue; }\n                    let strikeRate = newData[i][1] / newData[i][4] * 100;\n                    // 1 decimal place\n                    value = Math.round(strikeRate);\n                    break;\n            }\n            // Don't include if there's no data\n            if (value === \"N/A\") { continue; }\n\n            // v: Tooltip text, f: ISO region code\n            temp.push([{v:translate[newData[i][0]], f:newData[i][0]}, parseInt(value)]);\n        }\n\n        setMyData(temp)\n\n    }, [province, mapType]);\n\n  const getOption = () => {\n      return {\n          region: 'AU', // ISO 3166-1 alpha-2 code for Australia\n          colorAxis: { colors: mapGradient},\n          backgroundColor: 'white',\n          datalessRegionColor: 'rgb(216,221,224)',\n          defaultColor: '#f5f5f5',\n          resolution: 'provinces'\n      }\n  };\n\n  const toggleData = (e) => {\n      setMapType(e.target.value);\n  }\n\n  return (\n    loading ? <div className=\"loading\">Loading...</div> :\n    <div className=\"stateMap\">\n        <h2> Cases by State {province ? `Â· ${province.name}` : false} </h2>\n        <span className=\"selection-grid\">\n            <NativeSelect\n                className=\"mapToggle\"\n                onChange={toggleData}\n            >\n                <option value=\"confirmed-cases\">Confirmed cases</option>\n                <option value=\"relative-cases\">Cases per million people</option>\n                <option value=\"tested\">Tested</option>\n                <option value=\"relative-tests\">Tests per million people</option>\n                {/*<option value=\"deaths\">Deaths</option>*/}\n\n                <option value=\"test-strike\">Positive test rate</option>\n            </NativeSelect>\n        </span>\n        \n        <Chart\n            width= {window.innerWidth < 960?'100%':'auto'}\n            left=\"auto\"\n            align=\"right\"\n            top=\"40%\"\n            chartType=\"GeoChart\"\n            data={myData}\n            options={getOption()}\n            // Note: you will need to get a mapsApiKey for your project.\n            // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\n            mapsApiKey=\"YOUR_KEY_HERE\"\n            rootProps={{ 'data-testid': '3' }}\n        />\n    </div>\n  )\n}\n\nexport default GoogleMap\n"],"sourceRoot":""}